---
description: The Vibe Coding Implementation Mode (IMPLEMENT). Executes the implementation plan using the rigorous "Seven-Step Heartbeat" workflow, enforcing Conventional Commits and Proactive Context Hygiene.
globs: ["implement_mode.mdc"]
alwaysApply: false
---

# ⚒️ IMPLEMENT 模式：核心施工 - 指挥 AI 的心跳节拍

> **TL;DR:** 此模式是执行 `implementation-plan.md` 的核心工作流。您将作为“施工总指挥”，通过一个名为“七步心跳法”的严谨循环，精确地指挥“AI 施工队”完成每一个原子任务。

```mermaid
graph TD
    subgraph "IMPLEMENT 模式: 七步心跳法"
        direction TB
        A[▶️ 开始施工] --> B(1. 澄清 Clarify);
        B --> C(2. 指令 Prompt);
        C --> D(3. 执行 Execute);
        D --> E(4. 验证 Validate);
        E --> F(5. 记录 Document);
        F --> G(6. 提交 Commit);
        G --> H(7. 净化 Reset);
        H --> I{还有任务?};
        I -- Yes --> C;
        I -- No --> J[✅ 施工完成];
    end

    subgraph "输入"
        IP[📜 implementation-plan.md]
        CD[📄 creative-decision-*.md]
    end

    subgraph "输出"
        Code[💻 实际的代码变更]
        Git[📦 符合规范的 Git 提交]
    end
    
    IP --> A;
    CD --> A;
    J --> Code & Git;

    style A fill:#d81b60,color:white,stroke-width:2px,stroke:black
    style B fill:#1e88e5,color:white
    style C fill:#1e88e5,color:white
    style D fill:#1e88e5,color:white
    style E fill:#fdd835,color:black
    style F fill:#1e88e5,color:white
    style G fill:#fdd835,color:black
    style H fill:#1e88e5,color:white
    style I fill:#e53935,color:white
    style J fill:#43a047,color:white,stroke-width:2px,stroke:black
```

## Vibe Coding 核心工作流：七步心跳法

这是 Vibe Coding 的心跳节拍。对于 `implementation-plan.md` 中的**每一个原子任务**，您都必须严格遵循以下七个步骤：

### 第一步：澄清 (Clarify) - “起飞前检查”

  - 在正式下达编码指令前，先对即将执行的**单个原子任务**进行“保险检查”。
  - **指令**: 向 AI 提问：“我们现在要开始执行 `implementation-plan.md` 的步骤 `[任务ID]`。请阅读 `memory-bank` 获取最新上下文，针对这一步，你有没有任何问题可以帮助你更精确地理解任务？”
  - **价值**: 这个步骤能暴露计划中的微小歧义，是成本最低的“纠错机会”。

### 第二步：指令 (Prompt) - “下达施工命令”

  - 使用预设的代码片段 (Snippet) 快速生成标准指令。
  - **指令**: “阅读 `/memory-bank` 获取最新上下文，然后执行 `implementation-plan.md` 的步骤 `[任务ID]`。在我验证测试之前，不要开始下一步。”

### 第三步：执行 (Execute) - “AI 开始编码”

  - AI 接收指令并生成或修改代码。您的角色是观察，并另开一个窗口准备进行代码审查。

### 第四步：验证 (Validate) - “你扮演质检员”

  - **亲自验证**: 按照 `implementation-plan.md` 中为该步骤定义的**验证标准**进行测试。
  - **AI 辅助审查**: (可选但强烈推荐) 另开一个聊天窗口，让另一个 AI 模型以最挑剔的眼光审查刚刚生成的代码。
      - *指令示例*: “你是一名资深的软件架构师，请以最挑剔的眼光审查以下代码。找出它的设计缺陷、潜在的性能瓶颈、可维护性问题，并提出具体的、可执行的重构建议。”

### 第五步：记录 (Document) - “更新记忆银行”

  - 测试通过后，立即指令 AI 更新项目文档，这是保证 `memory-bank` 始终“鲜活”的关键。
  - **指令**: “验证通过。请现在更新 `progress.md` 和 `architecture.md`。” AI 将记录已完成的步骤，并更新架构文档。

### 第六步：提交 (Commit) - “刻下历史年轮”

  - 将这个稳定、已验证的版本提交到 Git。这是为您提供坚实的“后悔药”。
  - **强制纪律**: 必须亲手书写符合 **“约定式提交 (Conventional Commits)”** 规范的 message。
  - **格式**: `<类型>(<范围>): <描述>`
      - **类型**: `feat` (新功能), `fix` (修复), `docs`, `style`, `refactor`, `test`, `chore`
      - **范围 (可选)**: 影响的模块，如 `(api)`, `(ui)`。
      - **描述**: 动词开头的祈使句。
  - **关联任务 ID (强制)**: 必须将任务 ID 包含在 Commit Message 中，以实现代码与规划的完美链接。
      - **优秀示例**: 
      ```
      feat(timer): add start and stop buttons (step-2.1) 
       - Replace individual filter builds with unified 'pnpm build' command
       - Leverage Turbo's dependency management for correct build order
      ```
 - commit最后2行不要换行!!    

### 第七步：净化与重复 (Reset & Repeat) - “开启新篇章”

  - **核心原则**: **主动净化上下文 (Proactive Context Hygiene)**。
  - **操作**: 在 Cursor 中**开启一个全新的聊天会-话 (Cmd + N 或 Ctrl + N)**，然后再回到第二步“指令”，开始下一个原子任务。
  - **必要性**: 这能确保 AI 不会被上一步的讨论、失败尝试或缓存信息所“污染”。每一次，它都是在一个“干净”的思维环境中，仅基于 `memory-bank` 里的权威事实来开始新的工作，极大地提升输出的准确性。

**下一步建议**:
当 `implementation-plan.md` 中的所有任务都已通过“七步心跳法”完成后，建议进入 **REFLECT + ARCHIVE 模式**，进行复盘与归档。

