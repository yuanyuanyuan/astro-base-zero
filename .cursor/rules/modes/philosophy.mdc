---
description: The core philosophy of the Vibe Coding system. This is the foundational mindset required before any work begins.
globs: ["philosophy.mdc"]
alwaysApply: true
---

# Vibe Coding 权威实践手册：思维奠基

> **TL;DR:** 在触摸键盘之前，我们必须完成一次彻底的思维转变。Vibe Coding 的灵魂，是角色的重塑。你不是“编码员”，而是“项目总监”。你的核心产出不是代码，而是那份极致清晰的“蓝图”。

```mermaid
graph TD
    A["你不是在'写代码'"] --> B["你是在'设计蓝图'"];
    B --> C["AI 是你的施工队"];
    C --> D["你的指令必须 100% 清晰"];
    D --> E["拥抱 80/20 法则"];
    E --> F["持续、严格地 Review"];
    F --> A;

    style A fill:#262626,stroke:#ff6f61,color:#fff
    style B fill:#333,stroke:#ff6f61,color:#fff
    style C fill:#333,stroke:#ff6f61,color:#fff
    style D fill:#333,stroke:#ff6f61,color:#fff
    style E fill:#333,stroke:#ff6f61,color:#fff
    style F fill:#333,stroke:#ff6f61,color:#fff
```

## 1\. 核心角色转变：从“编码员”到“项目总监”

  - 你不再是那个亲手砌砖的工匠，而是成为了设计整座大教堂的总建筑师。你的职责是规划、设计和监督。
  - 这意味着，你需要将100%的精力聚焦于设计和保障那20%的核心架构（地基与承重柱）。
  - 当你能熟练地执行整个工作流时，你会进入一种行云流水的“心流”状态，并收获前所未有的掌控感、大局观和节奏感。

## 2\. 核心工作隐喻：AI 是你的高效施工队

  - AI 是你的施工队，他们拥有无数个超人，可以在一秒钟内砌好一万块砖，但他们完全没有审美和思考能力。
  - 如果你对他们说：“给我盖个漂亮的教堂”，他们会把砖块堆成一团糟。
  - 如果你给他们一份精确到每一块砖的位置、每一个窗户的尺寸的蓝图，他们就能在一夜之间为你建起一座完美的圣母大院。
  - 因此，Vibe Coding 的核心产出并非代码，而是那份极致清晰、无歧义的“蓝图”——即你的各种规划文档。

## 3\. 核心工程哲学：拥抱 80/20 法则

  - 我们不追求一次性做出100%完美的产品。在产品初期，花费80%的精力去完善那额外的20%价值，是一笔糟糕的投资。
  - 我们的目标是，先用20%的力气拿到80分的成果，这已经“超级好了”。
  - 识别出项目中那“关键的20%”——通常是核心数据结构和模块间的契约——并投入100%的精力用最严谨的方式确保其正确。
  - 对于剩下那80%的“血肉”（如UI组件），则可以大胆利用AI，快速迭代，实现“足够好”即可。这是一种主动的、健康的“技术债”管理策略。

## 4\. 每一个任务或者每一步或者每一个阶段完成后都需要做 Review

  - **授权 AI 进行反问**：在你发送的指令末尾，可以加上一句：“Think as long as needed to get this right, I am not in a hurry. What matters is that you follow precisely what I ask you and execute it perfectly. Ask me questions if I am not precise enough.” 这句话赋予了 AI “反问”的权利，当你的指令有歧义时，它会主动寻求澄清，而不是基于错误的猜测去执行，从而极大减少了返工的概率。
  - **利用 AI 顾问团**：把一个功能点同时丢给多个不同的专业AI大模型。看看它们各自提供的拆解策略。它们会像多个免费顾问一样，给你提供不同的思路，然后你结合自己的经验进行review，就能整理出最全面、最合理的子任务列表。
  - **构建任务树**：在编写 `implementation-plan.md` 之前，构建一个完整的、层级分明的任务树，这个任务树的顶端是最终产品，下面是主要功能模块，再往下是子功能，最后才是具体的、可执行的原子任务。基于这个任务树进行review，这能确保你从第一行代码开始，就拥有了上帝视角的“大局观”。
  - **维护架构文档**：每当你或 AI 添加了一个新文件或服务，你就必须立刻去 `architecture.md` 中记录下它的用途和职责，并简要记录做出该决策的‘理由’和‘权衡’。这不仅仅是记录‘有什么’，更是记录‘为什么’，为未来的自己和团队留下宝贵的思想财富。

