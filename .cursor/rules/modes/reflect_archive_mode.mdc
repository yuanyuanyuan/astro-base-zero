---
description: The Vibe Coding Reflection and Archiving Mode. It first guides a deep reflection, incorporating a three-tier emergency plan for troubleshooting, and then, upon command, handles the final project archiving.
globs: ["reflect_archive_mode.mdc"]
alwaysApply: false
---

# 🔎 REFLECT & ARCHIVE 模式：反思、修复与归档

> **TL;DR:** 此模式包含两个阶段。**第一阶段：反思与修复**，您将复盘整个过程，并学习在遇到问题时，如何运用“三层应急预案”进行修复。**第二阶段：归档**，在您确认复盘结束后，将所有项目知识沉淀为永久档案。

```mermaid
graph TD
    subgraph "整体流程：先反思，后归档"
        A[▶️ 开始] --> B{1. 反思与复盘};
        B --> C{"遇到问题或僵局?"};
        C -- No --> D[进行标准复盘];
        C -- Yes --> E[启动三层应急预案];
        D --> F[✅ 反思完成];
        E --> F;
        F --> G["💬 等待 'ARCHIVE NOW' 指令"];
        G --> H{2. 执行归档};
        H --> I[✅ 项目归档完成];
    end

    subgraph "三层应急预案 (手册 4.0 核心)"
        T1["微观修复 (指令/代码错误)"]
        T2["中观回滚 (功能偏离)"]
        T3["宏观诊断 (架构僵局)"]
    end
    
    E -.-> T1 & T2 & T3;

    style A fill:#7e57c2,color:white,stroke-width:2px,stroke:black
    style C fill:#e53935,color:white
    style E fill:#fdd835,color:black
    style G fill:#fb8c00,color:white
    style I fill:#43a047,color:white,stroke-width:2px,stroke:black
```

## 第一阶段：反思与修复

在项目施工完成后，我们首先进行复盘。如果过程一帆风顺，则进行标准复盘（总结经验、记录亮点）。如果遇到问题，则启动以下应急预案。

### 🚨 Vibe Coding 三层应急预案 🚨

这是衡量架构师成熟度的重要标准。我将引导您根据问题的严重性，选择合适的预案。

#### **预案一：微观修复 (指令失效与代码错误)**

这是最常见的场景，通常源于指令不清晰或 AI 的误解。

  - **策略**: 不要接受错误的代码。果断撤销 AI 的修改。
  - **行动**: 我会引导您**优化指令**。思考 AI 为何会误解，然后用更精确的语言再次下达指令。如果出现运行时错误，我会提示您**直接复制控制台的完整错误信息**，并指令 AI 进行修复。
  - **指令模板 (vfix)**:
    > “执行步骤 X 时出现 bug。
    > **观察到的行为：** [描述现象]
    > **控制台错误：** `[粘贴完整错误堆栈]`
    > **预期的行为：** [描述正确行为]
    > 请分析并修复。”

#### **预案二：中观回滚 (功能偏离航向)**

当你发现一个功能经过几轮修改后，方向已经完全偏离了最初的设计，或者代码变得混乱。

  - **策略**: 停止在混乱的代码上“缝缝补补”。进行战略性撤退。
  - **行动**: 我会坚定地建议您**执行 `git reset`**，回到上一个已知的、稳定的提交点。这并非浪费时间，而是 Vibe Coding 纪律性的核心体现。它为您提供了一个干净的起点，用新的、更好的思路重新挑战这个问题。

#### **预案三：宏观诊断 (项目陷入重大僵局)**

如果你感觉整个项目架构可能出了问题，或遇到了一个无法解决的复杂难题。

  - **策略**: 寻求“专家会诊”。将整个项目的上下文打包，交由具备超大上下文窗口和强大架构理解能力的 AI 进行一次全局诊断。
  - **行动**:
    1.  **打包代码库**: 我会建议并指导您使用像 `RepoPrompt` 或 `uithub` 这样的工具，将整个项目代码库打包成一个可以复制粘贴的文本文件。
    2.  **请求会诊**: 将打包后的代码，连同 `memory-bank` 里的核心规划文档，一并提交给更强大的 AI（如 Gemini 2.5 Pro）。
    3.  **指令模板**:
        > “你好，我需要你扮演一位顶级的软件架构师。这是我的整个项目代码库和核心设计文档。
        > **[在此处粘贴打包后的代码库和文档内容]**
        > **我遇到的问题是：** [详细描述你遇到的困境]
        > **请为我进行一次全面的架构诊断，并提供一份详细的、分步骤的重构或解决方案建议。**”

## 第二阶段：归档 (指令: `ARCHIVE NOW`)

在您确认所有反思与修复工作完成后，请发出 `ARCHIVE NOW` 指令，我将开始执行归档流程。

1.  **整合文档**: 整理 `memory-bank` 中所有核心文档 (`产品需求文档.md`, `tech-stack.md`, `implementation-plan.md`, 所有 `creative-decision-*.md`)。
2.  **创建最终档案**: 生成一份最终的 `ARCHIVE.md`，汇总所有关键信息和链接。
3.  **清理工作区**: 指导您清理临时文件，并将 `progress.md` 标记为最终状态。
4.  **准备下一轮迭代**: 确保 `memory-bank` 处于一个干净的状态，为项目的下一个 Vibe 循环做好准备。

**下一步建议**:
恭喜！一个完整的 Vibe Coding 迭代周期已经完成。您已经拥有了一个经过深思熟虑、精确执行并充分复盘的高质量产品模块。现在，您可以回到 **VAN 模式**，开启新的征程。




