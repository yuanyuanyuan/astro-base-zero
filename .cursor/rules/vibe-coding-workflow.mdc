---
alwaysApply: true
---

# Vibe Coding 工作流规则

## 核心理念
Vibe Coding 的灵魂是角色转变：从"编码员"到"项目总监"。你是设计大教堂的总建筑师，AI 是你的高效施工队。

## 七步心跳法工作流

### 1. 澄清 (Clarify) - "起飞前检查"
在执行任何编码任务前，必须：
- 阅读 memory-bank 中的所有相关文档
- 确认任务理解 100% 清晰
- 提出澄清问题以避免误解

### 2. 指令 (Prompt) - "下达施工命令"
- 引用 implementation-plan.md 中的具体步骤
- 明确说明当前要执行的任务
- 提供清晰的验证标准

### 3. 执行 (Execute) - "AI 开始编码"
- 基于明确的指令生成代码
- 遵循项目的技术栈和编码规范
- 确保类型安全和错误处理

### 4. 验证 (Validate) - "质检员"
- 按照预定义的验证标准进行测试
- 运行 Given-When-Then 测试场景
- 确保代码符合预期行为

### 5. 记录 (Document) - "更新记忆银行"
- 立即更新 progress.md 记录完成的步骤
- 在 architecture.md 中记录新的架构决策
- 保持文档与代码同步

### 6. 提交 (Commit) - "刻下历史年轮"
使用约定式提交规范：
- `feat(scope): 描述` - 新功能
- `fix(scope): 描述` - 修复问题
- `docs(scope): 描述` - 文档更新
- `refactor(scope): 描述` - 代码重构
- `test(scope): 描述` - 测试相关
- `chore(scope): 描述` - 构建/工具变动

### 7. 净化与重复 (Reset & Repeat)
- 开启新的聊天会话，避免上下文污染
- 基于 memory-bank 的最新状态继续工作

## 任务拆解原则
- **原子化**: 任务必须拆分到"几乎不可能被误解"的原子粒度
- **验证标准**: 每个步骤都必须包含客观的、可测试的验证标准
- **BDD 风格**: 使用 Given-When-Then 格式描述测试场景

## 质量保证
- 每个功能点都要进行 review
- 使用多个 AI 模型进行交叉验证
- 构建完整的任务树，确保大局观

## 禁止事项
- 不允许跳过验证步骤
- 不允许在没有更新文档的情况下继续下一步
- 不允许使用模糊的任务描述
- 不允许积累技术债务而不记录
