
---
alwaysApply: true
description: "Implements the core principles and workflow of Vibe Coding, a methodology for structured, documentation-driven development."
---

# Vibe Coding Workflow - Core Operating Principles

This document outlines the mandatory workflow for this project. Adherence is critical for ensuring quality, consistency, and maintainability. This rule is based on the principles outlined in [Vibe-coding.md](mdc:memory-bank/Vibe-coding.md).

## 1. The Golden Rule: Documentation First

**Before any action, you MUST consult the `memory-bank`.** This is the single source of truth. Your primary role is to execute the `implementation-plan.md` step-by-step.

-   **Product Requirements**: [产品需求文档v1-融合版.md](mdc:memory-bank/Astro项目快速发布平台/产品需求文档v1-融合版.md)
-   **Technical Stack**: [tech-stack.md](mdc:memory-bank/Astro项目快速发布平台/tech-stack.md)
-   **Implementation Plan**: [implementation-plan.md](mdc:memory-bank/Astro项目快速发布平台/implementation-plan.md)
-   **Architecture Decisions**: [architecture.md](mdc:memory-bank/Astro项目快速发布平台/architecture.md)

## 2. The Seven-Step Heartbeat Workflow (Core Construction Phase)

You must follow this cycle for every task defined in the implementation plan. This is the heartbeat of Vibe Coding.

### Step 1: Clarify (澄清) - "Pre-flight Check"
- **BEFORE** executing any code, ask: "Please read /memory-bank documents, especially implementation-plan.md. Is this plan 100% clear to you? What questions can help you understand the task more precisely?"
- Use AI feedback to optimize the implementation plan if needed
- This is the lowest-cost "error correction opportunity"

### Step 2: Prompt (指令) - "Issue Construction Command"
- Use configured code snippets (e.g., vstep + Tab) for standard instructions
- Core instruction format: "Read /memory-bank for latest context, then execute step N of implementation-plan.md. Do not start the next step until I validate the test."
- Be specific about which atomic step to execute

### Step 3: Execute (执行) - "AI Starts Coding"
- AI receives instruction and generates/modifies code
- Your role is to observe and wait
- Open another tool/window for code review preparation

### Step 4: Validate (验证) - "You Are the Quality Inspector"
- **Personally verify** AI's work against the test method defined in implementation-plan.md for this step
- **AI Reviews AI Code**: Open another chat window, let another AI model review the generated code changes
- Review instruction example: "You are a senior software architect. Please examine the following code with the most critical eye. Find design flaws, potential performance bottlenecks, maintainability issues, and provide specific, actionable refactoring suggestions. Don't just say nice things."

### Step 5: Document (记录) - "Update Memory Bank"
- After test passes, immediately instruct AI to update project documentation
- Instruction: "Validation passed. Please now update progress.md and architecture.md."
- AI will record completed steps in progress.md and new file structures/design insights in architecture.md
- **Record decision rationale**: Not just "what" but "why" - include reasoning and trade-offs behind decisions

### Step 6: Commit (提交) - "Carve Historical Rings"
- Commit this stable, validated version to Git
- Provides solid "rollback option" - can always git reset to this safe state if later steps fail
- **Write "Architect-level" Commit Messages** following Conventional Commits specification:
  - Format: `<type>(<scope>): <description>`
  - Types: feat, fix, docs, style, refactor, test, chore
  - Include task ID if available: `feat(timer): add start and stop buttons (step-2)`
  - Use imperative mood, lowercase, no period at end

### Step 7: Reset & Repeat (净化与重复) - "Start New Chapter"
- **Proactive Context Hygiene**: Open a completely new chat session (Cmd + N in Cursor)
- This ensures AI isn't "contaminated" by previous discussions, failed attempts, or cached information
- Each step starts in a "clean" thinking environment, based only on authoritative facts in memory-bank

## 3. Strict Coding & Architecture Constraints

These are non-negotiable technical constraints.

-   **Tech Stack Adherence**: You MUST strictly adhere to the technologies and versions specified in the tech stack documentation.
-   **Code Size Limits**:
    -   No single file shall exceed **500 lines**.
    -   No single function shall exceed **150 lines**.
    -   If a task requires more code, it must be broken down into smaller, modular parts.
-   **Modularity**: Prioritize creating small, reusable, and configurable modules.
-   **No `any` type**: All code must be type-safe. The `any` type is forbidden.

## 4. Emergency Plans & Troubleshooting (Phase 3)

### Emergency Plan 1: Micro-level Fixes - Instruction Failures & Code Errors

**Scenario 1: AI-generated code doesn't meet expectations or instruction fails**
- **Strategy**: Don't accept wrong code. Click "restore" button in Cursor or use shortcuts to undo AI modifications
- **Action**: Refine your prompt. Think about why AI misunderstood - was your instruction ambiguous or missing key context?

**Scenario 2: Code shows errors in browser console (F12)**
- **Strategy**: Treat AI as a junior developer who needs precise error reports
- **Action**: Copy complete error information from console, paste into chat
- **Instruction template (vfix)**:
  ```
  Bug occurred while executing step X.
  **Observed behavior**: Button click has no response, console shows following error:
  [Paste complete error stack information here]
  **Expected behavior**: According to implementation-plan.md, clicking button should show a popup.
  Please analyze and fix this issue.
  ```

### Emergency Plan 2: Mid-level Rollback - When Features Deviate

**When a feature has completely deviated from initial design after several rounds of modifications, or code becomes increasingly chaotic:**
- **Strategy**: Don't try to "patch" on chaotic code. Execute strategic retreat decisively
- **Action**: Execute `git reset` to return to last known stable commit point
- This isn't wasted time - it's core discipline of Vibe Coding, providing clean starting point for better approach

### Emergency Plan 3: Macro-level Diagnosis - Major Project Deadlock

**When you feel the entire project architecture might be problematic, or encounter unsolvable complex issues:**
- **Strategy**: Package entire project context for "expert consultation" by AI with large context window
- **Action**:
  1. **Package codebase**: Use tools like RepoPrompt or uithub to package entire project into copyable text
  2. **Request consultation**: Submit packaged code + core planning documents to large context AI (like Gemini 2.5 Pro)
  3. **Consultation instruction template**:
     ```
     Hello, I need you to act as a top-level software architect. Here's my entire project codebase and core design documents.
     [Paste packaged codebase and document content here]
     **The problem I'm facing**: [Detailed description of predicament]
     **Please provide comprehensive architectural diagnosis and detailed, step-by-step refactoring or solution recommendations.**
     ```

## 5. Development Modes for Validation Standards

### Mode 1: Agile Validation Mode (Default)
- **Use case**: Rapid prototyping, exploratory features, speed-over-everything phases
- **Method**: Simple, descriptive test methods
- Example: "Press spacebar in browser, confirm bullets are created"

### Mode 2: Extreme Quality Mode (TDD/BDD Driven)
- **Use case**: Core modules, critical business logic, scenarios requiring ultimate stability
- **Method**: Upgrade single-instruction cycle to TDD's "Red-Green-Refactor" three-instruction interaction
- **Sub-step 1**: Define behavior with BDD Given-When-Then format
- **Sub-step 2**: Execute TDD cycle in core workflow (Write failing test → Make test pass → Refactor)

## 6. Prohibitions (Forbidden Actions)

-   **DO NOT** skip a validation step.
-   **DO NOT** proceed to the next task without completing documentation and commit steps.
-   **DO NOT** work from vague instructions; always clarify.
-   **DO NOT** introduce undocumented technical debt.
-   **DO NOT** continue on corrupted/chaotic code - use strategic rollback instead.
-   **DO NOT** pollute context between steps - always start fresh chat sessions.
