---
globs: "*.astro"
---

# Astro 组件开发规则

## 组件结构
```astro
---
// 1. 导入语句
import Layout from '@/layouts/Layout.astro';
import Widget from '@/components/widgets/Widget.astro';

// 2. Props 接口定义
interface Props {
  title: string;
  description?: string;
}

// 3. Props 解构
const { title, description } = Astro.props;

// 4. 数据获取和处理
const data = await fetchData();
---

<!-- 5. 模板部分 -->
<Layout title={title}>
  <Widget {...data} />
</Layout>
```

## 命名规范
- **组件文件**: 使用 PascalCase (例如: `HeroSection.astro`)
- **布局文件**: 放在 `src/layouts/` 目录
- **页面文件**: 使用 kebab-case (例如: `about-us.astro`)
- **组件目录**: 按功能分组 (`widgets/`, `common/`, `ui/`)

## Props 管理
- 所有组件必须定义 Props 接口
- 使用 TypeScript 进行类型检查
- 提供合理的默认值
- 使用解构赋值获取 props

## 性能优化
- 默认使用静态渲染 (SSG)
- 需要交互时才使用 client 指令
- 优先使用 `client:visible` 而非 `client:load`
- 避免在组件中进行大量计算

## Slots 使用
```astro
---
const hasDefaultSlot = Astro.slots.has('default');
const hasNamedSlot = Astro.slots.has('header');
---

<div>
  {hasDefaultSlot && <slot />}
  {hasNamedSlot && <slot name="header" />}
</div>
```

## 样式管理
- 组件样式使用 `<style>` 标签，自动作用域隔离
- 全局样式使用 `is:global`
- 优先使用 Tailwind CSS 类
- 避免内联样式

## 集成 Widget 系统
- 所有 Widget 组件放在 `src/components/widgets/`
- 继承 BaseWidget 的 props 结构
- 支持通过配置启用/禁用
- 实现响应式设计

## SEO 最佳实践
- 页面组件必须设置适当的 meta 标签
- 使用语义化 HTML
- 图片必须包含 alt 属性
- 实现结构化数据 (JSON-LD)

## 错误处理
- 使用 try-catch 包裹异步操作
- 提供友好的错误回退界面
- 在开发环境显示详细错误信息
