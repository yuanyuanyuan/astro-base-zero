---
globs: "*.ts,*.tsx"
---

# TypeScript 编码规则

## 类型安全要求
- **禁止使用 `any` 类型** - 必须明确所有类型定义
- **优先使用 interface 而非 type** - 除非需要联合类型或映射类型
- **必须导出所有公共接口** - 确保跨模块的类型可用性
- **使用严格模式** - tsconfig 中必须启用 strict: true

## 命名规范
- **接口**: 使用 PascalCase，不使用 I 前缀
- **类型**: 使用 PascalCase
- **枚举**: 使用 PascalCase，成员使用 UPPER_SNAKE_CASE
- **常量**: 使用 UPPER_SNAKE_CASE
- **函数/方法**: 使用 camelCase
- **私有成员**: 使用 _ 前缀

## 代码组织
```typescript
// 1. 导入语句（按以下顺序）
import { external } from 'external-package';
import { internal } from '@/internal-package';
import { relative } from './relative-module';

// 2. 类型定义
interface MyInterface {
  // ...
}

// 3. 常量定义
const MY_CONSTANT = 'value';

// 4. 主要代码
export class MyClass {
  // ...
}

// 5. 辅助函数
function helperFunction() {
  // ...
}
```

## Zod Schema 使用规范
- 所有外部数据输入必须通过 Zod 验证
- Schema 定义与接口定义保持一致
- 使用 `.parse()` 而非 `.safeParse()` 在边界处理

## 错误处理
- 使用自定义错误类继承 Error
- 在错误信息中包含上下文信息
- 对于预期错误，使用 Result 类型模式

## 异步代码
- 优先使用 async/await 而非 Promise chains
- 总是处理 Promise 拒绝
- 使用 Promise.all 进行并行操作

## 测试相关
- 测试文件使用 `.test.ts` 或 `.spec.ts` 后缀
- 测试描述使用 Given-When-Then 格式
- 每个公共方法都必须有对应的单元测试
