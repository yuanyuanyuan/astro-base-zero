---
alwaysApply: true
---

# Astro Project Launcher - Core Project Rules

# RULE 1: THE PRIME DIRECTIVE - ALWAYS CHECK THE MEMORY BANK
# CRITICAL: Before writing or modifying any code, you MUST read the following documents to understand the full context, goals, and constraints. This is your single source of truth.
# 1. **Product Requirements**: [PRD-v3-分阶段交付版.md](mdc:memory-bank/PRD-v3-分阶段交付版.md) - Understand WHAT we are building.
# 2. **Technical Stack**: [tech-stack-v4-分阶段交付版.md](mdc:memory-bank/tech-stack-v4-分阶段交付版.md) - Understand HOW we are building it.

# RULE 2: PHASE 1 SCOPE ENFORCEMENT
# IMPORTANT: All work is strictly limited to "Phase 1 - 静态版本" as defined in the PRD.
# - **Implement ONLY**: Features listed in "3.1 Phase 1 - 静态版本 Must Have".
# - **Prohibited Features**: Do NOT implement anything from "Phase 2" or "Won't Have". This includes databases, user accounts, and payment systems.

# RULE 3: TECH STACK ADHERENCE
# You MUST strictly use the technologies from the tech stack document for Phase 1.
# - **Core Framework:** Astro v5.0.0
# - **Language:** TypeScript v5.3.3 (Progressive Typing: JS with JSDoc first)
# - **Styling:** Tailwind CSS v3.4.1
# - **CLI:** Commander.js, Inquirer.js
# - **Config & Schema:** YAML, Zod
# - **Templating:** Handlebars
# - **Local DB:** `lowdb` v7
# - **Tooling:** `pnpm`, `Turbo`, `Vitest`

# RULE 4: AI INTEGRATION PROTOCOL
# Follow the "Externalized AI Integration" strategy from the tech stack doc.
# - **DO NOT** manage API keys or make direct API calls to AI services.
# - **DO** generate shell commands that execute the user's local AI CLI tools (e.g., `claude-code-cli`) using Node.js `child_process`.
# - **Fallback:** Use pre-defined templates if AI tools are unavailable.

# RULE 5: DEVELOPMENT WORKFLOW & CODE STYLE
# - **Workflow:** Follow the "LLM as Accelerator" + "Human as Fortifier" model.
# - **Output:** Generate clean, modular JavaScript with comprehensive JSDoc comments. The human developer will upgrade to full TS.
# - **Modularity:** Break down logic into small, single-responsibility functions and files.
# - **Commits:** Messages MUST follow the Conventional Commits specification.

# RULE 6: CODE SIZE CONSTRAINT
# CRITICAL: Enforce strict code size limits for maintainability.
# 1. **File Limit:** No single file should exceed 500 lines.
# 2. **Function Limit:** No single function should exceed 150 lines.
# 3. **Principle:** Prioritize modularity, componentization, and configuration.
# Astro Project Launcher - Core Project Rules

# RULE 1: THE PRIME DIRECTIVE - ALWAYS CHECK THE MEMORY BANK
# CRITICAL: Before writing or modifying any code, you MUST read the following documents to understand the full context, goals, and constraints. This is your single source of truth.
# 1. **Product Requirements**: [PRD-v3-分阶段交付版.md](mdc:memory-bank/PRD-v3-分阶段交付版.md) - Understand WHAT we are building.
# 2. **Technical Stack**: [tech-stack-v4-分阶段交付版.md](mdc:memory-bank/tech-stack-v4-分阶段交付版.md) - Understand HOW we are building it.

# RULE 2: PHASE 1 SCOPE ENFORCEMENT
# IMPORTANT: All work is strictly limited to "Phase 1 - 静态版本" as defined in the PRD.
# - **Implement ONLY**: Features listed in "3.1 Phase 1 - 静态版本 Must Have".
# - **Prohibited Features**: Do NOT implement anything from "Phase 2" or "Won't Have". This includes databases, user accounts, and payment systems.

# RULE 3: TECH STACK ADHERENCE
# You MUST strictly use the technologies from the tech stack document for Phase 1.
# - **Core Framework:** Astro v5.0.0
# - **Language:** TypeScript v5.3.3 (Progressive Typing: JS with JSDoc first)
# - **Styling:** Tailwind CSS v3.4.1
# - **CLI:** Commander.js, Inquirer.js
# - **Config & Schema:** YAML, Zod
# - **Templating:** Handlebars
# - **Local DB:** `lowdb` v7
# - **Tooling:** `pnpm`, `Turbo`, `Vitest`

# RULE 4: AI INTEGRATION PROTOCOL
# Follow the "Externalized AI Integration" strategy from the tech stack doc.
# - **DO NOT** manage API keys or make direct API calls to AI services.
# - **DO** generate shell commands that execute the user's local AI CLI tools (e.g., `claude-code-cli`) using Node.js `child_process`.
# - **Fallback:** Use pre-defined templates if AI tools are unavailable.

# RULE 5: DEVELOPMENT WORKFLOW & CODE STYLE
# - **Workflow:** Follow the "LLM as Accelerator" + "Human as Fortifier" model.
# - **Output:** Generate clean, modular JavaScript with comprehensive JSDoc comments. The human developer will upgrade to full TS.
# - **Modularity:** Break down logic into small, single-responsibility functions and files.
# - **Commits:** Messages MUST follow the Conventional Commits specification.

# RULE 6: CODE SIZE CONSTRAINT
# CRITICAL: Enforce strict code size limits for maintainability.
# 1. **File Limit:** No single file should exceed 500 lines.
# 2. **Function Limit:** No single function should exceed 150 lines.
# 3. **Principle:** Prioritize modularity, componentization, and configuration.
